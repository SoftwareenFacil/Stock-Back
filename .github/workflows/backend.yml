name: CI/CD backend 

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  edit:
    runs-on: ubuntu-latest
    env:
      CONNECTION_STRING: '"WebApiDatabase": "Host=host.docker.internal; Database=legalcont; Username=postgres; Password=root"'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - uses: microsoft/variable-substitution@v1 
        with:
          files: 'Stock-Back/appsettings.json'
        env:
          ConnectionStrings: ${{ env.CONNECTION_STRING }}
            
  build:
    runs-on: ubuntu-latest
    needs: edit
    env: 
      IMAGE_NAME: backend-app

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build -t ${{env.IMAGE_NAME}} .
        
      - name: Push Docker Image to Registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag ${{env.IMAGE_NAME}} ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGE_NAME}}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGE_NAME}}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~
            docker-compose -f docker-compose.backend.yml down
            docker-compose -f docker-compose.backend.yml pull
            docker-compose -f docker-compose.backend.yml up -d
            echo "Container deployed"
  migration:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Migrate to Postgres
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~
            docker cp backend:/app/script/script.sql ./script/script.sql
            dropdb -U postgres legalcont
            createdb -U postgres legalcont
            psql -U postgres -d legalcont -f ./script/script.sql 
            systemctl restart postgresql
            echo "DB restored"
  
